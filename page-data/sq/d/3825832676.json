{"data":{"projects":{"edges":[{"node":{"frontmatter":{"title":"Open Source Springboot Auth Microservice","tech":["Spring Boot","Java 17","PostgreSQL","Spring Security","JWT","AWS Secrets Manager","AWS EC2","Docker & Docker Compose","Github Actions CI/CD","Maven","Lombok","Spring Data JPA","Spring Validation","Spring Web","Spring Test","Spring Boot Actuator","Spring Boot DevTools"],"github":"https://github.com/Gable-github/auth-microservice","external":null},"html":"<p>Recognizing the recurring challenges of implementing secure authentication across distributed systems, I developed this lightweight authentication microservice to address common user management and JWT-based authentication requirements.</p>\n<p>Built with Spring Boot, it's designed to be easily integrated into any microservice architecture, almost like plug-and-play where you've got a fully functional auth system for your other services.</p>\n<p>This project was created to provide a production-ready, secure, and well-documented authentication solution that streamlines development while maintaining enterprise-grade security standards for all.</p>\n<p>The microservice is designed for flexible deployment across various environments - from local development to production-grade infrastructure, supporting both containerized deployments via Docker and orchestration through Kubernetes.</p>\n<p>API documentation is provided through SpringDoc OpenAPI (Swagger UI).</p>\n<p><strong>Key Features:</strong></p>\n<ul>\n<li>User registration and login endpoints</li>\n<li>JWT-based authentication and authorization</li>\n<li>Secure password hashing and input validation</li>\n<li>PostgreSQL database integration</li>\n<li>Environment-based configuration (local, production, Docker)</li>\n<li>AWS Secrets Manager for secure secret management in production</li>\n<li>RESTful API design with clear separation of concerns</li>\n<li>Comprehensive unit and integration tests</li>\n<li>Docker support for easy deployment and development</li>\n</ul>\n<p><strong>Security Highlights:</strong></p>\n<ul>\n<li>Passwords are securely hashed before storage</li>\n<li>JWT tokens are signed and validated using environment secrets</li>\n<li>Production secrets managed via AWS Secrets Manager</li>\n<li>HTTPS recommended for all deployments</li>\n</ul>\n<p><strong>Development &#x26; Deployment:</strong></p>\n<ul>\n<li>Profile-based configuration for local and production</li>\n<li>Docker Compose for local and production-like environments</li>\n<li>CI/CD with Github Actions</li>\n</ul>\n<p>For more details, see the <a href=\"https://github.com/Gable-github/auth-microservice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub repository</a>.</p>"}},{"node":{"frontmatter":{"title":"SwiftExchange: A Full-Stack Credit Card Points Exchange Application","tech":["Node.js","Express","React / Chakra UI","MongoDB","Cypress","JUnit","Socket.io"],"github":"https://github.com/Gable-github/ESC-P2C1-TCBackend","external":""},"html":"<p>Developed a full-stack app for converting credit card points to partner loyalty points.</p>\n<p>Implemented a <strong>webhook system</strong> with <strong>MongoDB change streams</strong> for real-time updates.</p>\n<p>Automated CSV exports via cron jobs and SFTP to Ascendaâ€™s API.</p>\n<p>Secured user data with <strong>JWT authentication</strong> and MongoDB.</p>"}},{"node":{"frontmatter":{"title":"WayFare: A Secure Tour Hosting & Booking Platform","tech":["Spring Boot","Java","MongoDB","Spring Security","JWT (jjwt)","Azure Blob Storage"],"github":"https://github.com/cthdarren/wayfare-backend","external":null},"html":"<p>Built a full-stack P2P app for discovering and hosting local tours with role-based access for guides and travelers.</p>\n<p>Implemented <strong>secure JWT authentication and Spring Security</strong> for user and access control.</p>\n<p>Integrated video upload, booking workflows, and content management using Azure Blob Storage.</p>\n<p>Developed RESTful APIs and persistent storage using Spring Boot and MongoDB.</p>"}}]}}}